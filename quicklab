#!/bin/sh
# shellcheck disable=SC2027
#
#==================================================================================================
#title           :quicklab
#description     :quickly create/destroy multiple vms on vmware vcenter
#author          :Wesley van Tilburg
#license         :MIT
#date            :12/03/2023
#version         :0.1
#=================================================================================================


usage(){ printf "quicklab v0.1; 
USAGE
	quicklab  [args...]
ARGS
	-d enable debug logging
	-s the vcenter server
	-u username to login
	-i ignore certificate errors
	-m mode (create,destroy)
	-f the file containing the lab settings
	-h show this menu
";
exit 0
}

#=================Util functions=================

#Edit version of the log functions for aweb by job79
log(){ printf '\033[%sm%-0s \e[0m| %s\n' "${1:-33}" "$2" "$3";}

debug(){ if [ "$DEBUG" ]; then log "37" "DEBUG" "$1";fi }
info(){  log "34" "INFO" "$1";}
err(){ log "06;31" "ERROR" "$1";}
errf(){ log "06;31" "ERROR" "$1"; exit 1; } #fatal error variant

cleanup(){
	info "Cleaning tmp files.."
	rm -rf "$TMP"
	info "Finished cleaning"
	stty echo
	exit
}
trap cleanup INT QUIT TERM

#curl helper functions
request(){ eval "$CURL $1";}
get(){ request "-X GET $1";}
post(){ request "-X POST $1";}
delete(){ request "-X DELETE $1";}
#===============================================

#Parse the placement field 
parse_placement(){
	info "Parsing placement fields and getting ids.."
	fields="cluster resource-pool datastore folder"
	for field in $fields 
	do
		#get the value from the yml
		yfield=".placement.$field"
		yvalue="$(yq -r "$yfield" "$FILE")"

		#get the correct element for field $field and name $yvalue (name) if it does exists and is accessible by the user
		idjson="$(get "$SERVER/api/vcenter/$field" | jq --arg value "$yvalue" -r '.[] | select(.name==$value)')"

		#Fix the stupid naming difference: api url: resource-pool, response json: resource_pool
		if [ "$field" = "resource-pool" ]; then field="resource_pool"; fi 

		id="$(echo "$idjson" | jq --arg field "$field" -r '.[$field]')"
		if [ -z "$id" ]; then errf "Failed to get id for '$field' with the name '$yvalue' "; fi
		debug "$field : $id"

		#create a $field.json
		#shellcheck disable=SC2086
		jq -n --arg field "$field" --arg id "$id" '{ "placement": { '$field': $id}}' >> "$TMP/$field".json
	done

	#create the placement json
	jq -n 'reduce inputs as $i ({}; . * $i)' "$TMP/"*.json >> "$TMP/placement.json"
	debug "placement json: $(cat "$TMP/placement.json")"
}

#parse the nics
#$1 is the vm index
#$2 are the vm nics
parse_nics(){
	#get the amount of nics
	nics="$( echo "$2" | yq -r ". | length" )"
	debug "nics: $nics"
	nindex=0
	jnics=""

	while [ "$nindex" -lt "$nics" ]
	do
		ynetwork="$(echo "$2" | yq -r ".["$nindex"] .network")"

		jnetwork="$(echo "$NETWORKS"| jq --arg value "$ynetwork" -r '.[] | select(.name==$value)')"
		type="$(echo "$jnetwork" | jq -r '.type')"
		network="$(echo "$jnetwork" | jq -r '.network')"

		#create nic json 
		jnic="$(jq -n --arg type "$type" --arg network "$network" \
			'{"backing":{"network":$network,"type":$type},"start_connected": true}')"
		jnics="$jnics $jnic"
		nindex=$((nindex+1))
	done

	#create the nic json array
	echo "$jnics" | jq -n '.nics |= [inputs]' >> "$TMP/$1/nics.json"
}

#parse the disks
#$1 is the vm index
#$2 are the vm disks
parse_disks(){
	#get the amount of disks
	disks="$( echo "$2" | yq -r ". | length" )"
	debug "disks: $disks"
	dindex=0
	jdisks=""

	while [ "$dindex" -lt "$disks" ]
	do
		dname="$(echo "$2" | yq -r ".["$dindex"] .name")"
		if ! capacity="$(units -o "%f" -t "$(echo "$2" | yq -r ".["$dindex"] .capacity")" "bytes" | cut -d. -f1 2>/dev/null)"; then
			err "Failed to parse disk capacity for vm '$1' disk '$dname'"
			continue
		fi

		#create disk json 
		jdisk="$(jq -n --arg name "$name" --arg capacity "$capacity" \
			'{"new_vmdk":{"capacity":$capacity,"name":$name},"type": "IDE"}')"
		jdisks="$jdisks $jdisk"
		dindex=$((dindex+1))
	done

	#create the disk json array
	echo "$jdisks" | jq -n '.disks |= [inputs]' >> "$TMP/$1/disks.json"
}

#parse the cds
#$1 is the vm index
#$2 are the vm cds
parse_cds(){
	#get the amount of cds
	cds="$( echo "$2" | yq -r ". | length" )"
	debug "cds: $cds"
	cindex=0
	jcds=""

	while [ "$cindex" -lt "$cds" ]
	do
		iso="$(echo "$2" | yq -r ".["$cindex"] .iso_file")"
		connected="$(echo "$2" | yq -r ".["$cindex"] .start_connected")"
		control="$(echo "$2" | yq -r ".["$cindex"] .allow_guest_control")"
	
		#create cds json 
		jcd="$(jq -n --arg iso "$iso" --arg control "$control" --arg connected "$connected" \
			'{"backing":{"iso_file":$iso,"type":"ISO_FILE"},"allow_guest_control": $control,"type":"IDE", "start_connected" : $connected}')"
		jcds="$jcds $jcd"
		cindex=$((cindex+1))
	done

	#create the disk json array
	echo "$jcds" | jq -n '.cdroms |= [inputs]' >> "$TMP/$1/cds.json"
}



#================= Create Logic =================
create(){
	#create a temp dir 
	TMP="$(mktemp -d)"

	#some vars
	filename="$(basename "$FILE" .yaml )"
	jvms=""

	#parse the placement field#
	parse_placement
	
	#Get all networks that the user can access to limit calls
	NETWORKS="$(get "$SERVER/api/vcenter/network")"
	debug "networks: $NETWORKS"

	#get amount of vms
	vms="$(yq '.vms | length' "$FILE" 2>/dev/null)"
	if [ "$vms" -eq 0 ]; then errf "No vms found in '$FILE'"; fi
	index=0
	info "Parsing vms.."

	#parse all the vms
	while [ "$index" -lt "$vms" ]
	do
		debug "Parsing vm: $index"
		mkdir -p "$TMP/$index" && cp "$TMP/placement.json" "$TMP/$index"

		#handle the simple fields
		vname="$(yq -r ".vms["$index"] .name" "$FILE")"
		os="$(yq -r ".vms["$index"] .guest_OS" "$FILE")"
		cores="$(yq -r ".vms["$index"] .cores" "$FILE")"
		if ! memory="$(units -o "%f" -t "$(yq -r ".vms[$index].memory" "$FILE")" "MB" | cut -d. -f1 2>/dev/null)"; then
			err "Failed to parse memory for vm '$vname'"
			continue
		fi
		debug "memory $memory"

		#create the json for the simple parts
		jq -n --arg name "$vname" --arg os "$os" --arg cores "$cores" --arg memory "$memory" '{"name":$name,"guest_OS":$os,"cpu":{"count":$cores},"memory":{"size_MiB":$memory}}' >> "$TMP/$index/simple.json"

		#Handle the seperate hardware fields
		parse_nics "$index" "$(yq -r ".vms[$index] .nics" "$FILE")" 
		parse_disks "$index" "$(yq -r ".vms[$index] .disks" "$FILE")" 
		parse_cds "$index" "$(yq -r ".vms[$index] .cds" "$FILE")" 

		#create the final vm json
	        jq -n 'reduce inputs as $i ({}; . * $i)' "$TMP/$index"/*.json >> "$TMP/$index/vm.json"
		debug "VM json: $(cat "$TMP/$index/vm.json")"

		#create the vm and save the id to a file
		resp="$(post "-H 'Content-Type: application/json' -d @$TMP/$index/vm.json $SERVER/api/vcenter/vm")"
		err="$(echo "$resp" | jq -r '.error_type' 2>/dev/null)"
		if [ -z "$err" ]; then
			id="$(echo "$resp" | jq -r )"
			info "Created vm '$vname' with id $id"

			#create the following json: {"name": "vmname", "id":"vm-******"}
                        jvm="$(jq -n --arg name "$vname" --arg id "$id" '{"name": $name, "id",$id}' )"
			jvms="$jvms $jvm"

			#start the vm after creation if required
			start="$(yq -r ".vms["$index"] .start_after_creation" "$FILE")"
			if "$start"; then 
				info "Starting VM '$vname' with id: '$id'..."
				if post "$SERVER/api/vcenter/vm/$id/power?action=start"; then
					info "Started VM '$vname' with id: '$id'"
				else
					err "Failed to start VM '$vname' with id: '$id'"
				fi
			fi
		else
			err "Failed to create vm '$vname' due to the following reason '$resp'"
		fi
	
		index=$((index+1))
	done
		#store the vm in json format which can be used by the destory method/ other tools
		if ! [ "$jvms" = "" ]; then echo "$jvms" | jq -n '.vms |= [inputs]' > "$PWD/$filename.json"; info "Created vms json";fi
}

#================= Destroy Logic =================
destroy(){
	#get the amount of cds
	vms="$(jq -r ".vms | length" < "$FILE" )"
	debug "vms: $vms"
	deindex=0
	info "Parsing vms.."

	while [ "$deindex" -lt "$vms" ]
	do
		name="$(jq -r --argjson index "$deindex" '.vms[$index] .name' < "$FILE")"
		id="$(jq -r --argjson index "$deindex" '.vms[$index] .id' < "$FILE")"
		debug "Name: $name"
		debug "ID: $id"

		#get the power state and shut the vm down if required
		state="$(get "$SERVER/api/vcenter/vm/$id/power" | jq -r '.state')"
		debug "Power state: $state"
		if ! [ "$state" = "POWERED_OFF" ]; then
			if ! post "$SERVER/api/vcenter/vm/$id/power?action=stop"; then
				err "Failed to stop VM '$name' with id: '$id'"
				continue
			else
					info "Stopped VM '$name' with id: '$id'"
			fi
		fi

		#delete the vm
		if ! delete "$SERVER/api/vcenter/vm/$id/"; then
			err "Failed to delete VM '$name' with id: '$id'"
			continue
		else
			info "Deleted VM '$name' with id: '$id'"
		fi

		deindex=$((deindex+1))
	done
}
#================= Dependency Logic =================
#Check if the requirements are installed
tools="curl jq yq units"
for tool in $tools
do
	if ! command -v "$tool" >/dev/null; then err "Missing dependency: $tool";fi
done

#================= Argument Logic=================
#Default curl arguments
CURL="curl -s "

#handle input
while getopts 'du:m:f:is:h' OPTION 2>/dev/null; do
	case "$OPTION" in
		d) DEBUG=true;;
		f) FILE="$OPTARG";;
		i) CURL="$CURL -k";;
		m) METHOD="$OPTARG";;
		s) SERVER="$OPTARG";;
		u) USER="$OPTARG";;
		*) usage;;
	esac
done

#check the required arguments
if [ -z "$FILE" ] || [ -z "$METHOD" ] || [ -z "$SERVER" ] || [ -z "$USER" ] ; then errf "One of the required arguments is missing"; fi;


#validate method, this check serves as an early exit
if  [ "$METHOD" != "create" ] && [ "$METHOD" != "destroy" ]; then errf "Method: '$METHOD' is not valid"; fi;

#Append https:// if not given
if ! echo "$SERVER" | grep -E -q "(http|https)://)"; then 
	SERVER="https://$SERVER"
fi

#make sure that the file exists and its either a valid json or yaml file
if ! [ -f "$FILE" ]; then errf "File: '$FILE' does not exist."; fi

type="$(echo "$FILE" | sed 's/.*\.//')"
debug "input file type : $type"
if  [ "$type" != "yaml" ] && [ "$type" != "json" ]; then errf "File type: '$type' is not supported"; fi;

#make sure that the methods only get their supported types: create = yaml, destroy = json
if [ "$METHOD" = "create" ] && [ "$type" != "yaml" ]; then errf "Method '$METHOD' only accepts 'yaml'"; fi
if [ "$METHOD" = "destroy" ] && [ "$type" != "json" ]; then errf "Method '$METHOD' only accepts 'json'"; fi

#use jq/yq to check if the file is valid
if [ "$type" = "json" ]; then
	if ! jq < "$FILE" >/dev/null 2>&1; then errf "Failed to parse file '$FILE'"; fi
fi
if [ "$type" = "yaml" ]; then
	if ! yq "$FILE" >/dev/null 2>&1; then errf "Failed to parse file '$FILE'"; fi
fi

debug "'$FILE' is a valid json/yaml file"

#Make sure we can access the server
if ! nc -zw2 "$(echo "$SERVER" | cut -d// -f3 )" 443 2>/dev/null; then errf "Cannot reach server '$SERVER'"; fi;

#Read the password
info "Enter password (Will not echo)";stty -echo;read -r PASS; stty echo
info "Trying to login.."

#Login to the server
session="$(post "$SERVER/api/session -u $USER:$PASS" | jq -r )"
if echo "$session" | grep -q error; then errf "Failed to login"; fi
info "Login successful"
CURL="$CURL -H 'vmware-api-session-id: $session'"

#Execute correct logic
case $METHOD in
	create) create;;
	destroy) destroy;;
esac

cleanup



